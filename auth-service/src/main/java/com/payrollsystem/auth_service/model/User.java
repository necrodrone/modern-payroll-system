package com.payrollsystem.auth_service.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

import java.util.HashSet;
import java.util.Set;

/**
 * JPA Entity representing a user in the authentication service.
 * Stores user details such as username, password, email, and assigned roles.
 */
@Entity
@Table(name = "users",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = "username"),
                @UniqueConstraint(columnNames = "email")
        })
public class User {

    /**
     * Unique identifier for the user. Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique username for the user. Cannot be blank and has size constraints.
     */
    @NotBlank
    @Size(max = 20)
    private String username;

    /**
     * User's email address. Must be unique and a valid email format.
     */
    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    /**
     * User's password. Stored as a hashed value. Cannot be blank and has size constraints.
     */
    @NotBlank
    @Size(max = 120)
    private String password;

    /**
     * Set of roles assigned to the user.
     * Uses ManyToMany relationship with a join table.
     * FetchType.LAZY is used for performance, as roles are not always needed.
     * CascadeType.ALL is used to propagate all operations (persist, merge, remove) to roles,
     * though with an enum, this is less critical. If Role becomes an entity, this is important.
     * JoinTable defines the linking table for the Many-to-Many relationship.
     */
    @ElementCollection(targetClass = Role.class, fetch = FetchType.EAGER) // EAGER fetch for roles, common for auth
    @CollectionTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"))
    @Column(name = "role_name", nullable = false)
    @Enumerated(EnumType.STRING) // Store enum names as strings in the database
    private Set<Role> roles = new HashSet<>();

    /**
     * Default constructor.
     */
    public User() {
    }

    /**
     * Constructor for creating a new user with username, email, and password.
     * Roles are set separately.
     *
     * @param username The username of the user.
     * @param email The email address of the user.
     * @param password The raw password of the user (will be encoded before saving).
     */
    public User(String username, String email, String password) {
        this.username = username;
        this.email = email;
        this.password = password;
    }

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Set<Role> getRoles() {
        return roles;
    }

    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }

    /**
     * Overrides toString for better logging and debugging.
     *
     * @return A string representation of the User object.
     */
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", email='" + email + '\'' +
                ", roles=" + roles +
                '}';
    }
}