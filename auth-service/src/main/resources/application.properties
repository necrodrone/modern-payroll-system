# Server Port - IMPORTANT: Should be different, Auth service typically runs on a different port than other services
server.port=8080

# For Local DB Connection
# Ensure your PostgreSQL instance has 'auth_db' created with 'postgres/1234' credentials
spring.datasource.url=jdbc:postgresql://localhost:5432/auth_db
spring.datasource.username=postgres
spring.datasource.password=1234
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# For Docker Connection (Uncomment and adjust when deploying with Docker Compose)
# spring.datasource.url=jdbc:postgresql://postgres_auth_db:5432/auth_db
# spring.datasource.username=auth_user
# spring.datasource.password=auth_secret
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true

# JWT Configuration (specific to auth-service)
# IMPORTANT: Change this secret key for production environments!
# IMPORTANT: Sample Key Only
auth.jwt.secret=MzRhMDdjOWI5ZTdiODBlZjI0ODc5MjM4NjIzMzAzMTU1NjEwNzU0ODc4ZTIwMGIzNGRhNDM5NWM0OGYzYTg1ZA==
auth.jwt.expirationMs=86400000

# Eureka client config
spring.application.name=auth-service
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.enabled=false # Keep false for standalone testing as per your original requirement for employee-service
# If you enable Eureka for employee-service in Docker, you should also enable it here.

# Spring MVC Servlet Path (Optional, but good for API Gateway consistency)
#spring.mvc.servlet.path=/api